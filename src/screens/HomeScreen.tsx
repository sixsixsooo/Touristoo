import React, { useEffect } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  SafeAreaView,
  Alert,
} from "react-native";
import { useDispatch, useSelector } from "react-redux";
import { StackNavigationProp } from "@react-navigation/stack";
import { RootStackParamList } from "@/types/navigation";
import { RootState } from "@/store";
import { startGame } from "@/store/slices/gameSlice";
import { adsService } from "@/services/adsService";

type HomeScreenNavigationProp = StackNavigationProp<RootStackParamList, "Main">;

interface Props {
  navigation: HomeScreenNavigationProp;
}

const HomeScreen: React.FC<Props> = ({ navigation }) => {
  const dispatch = useDispatch();
  const { currentPlayer, isAuthenticated } = useSelector(
    (state: RootState) => state.player
  );
  const { score, coins, currentLevel } = useSelector(
    (state: RootState) => state.game
  );

  useEffect(() => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä–Ω—É—é —Ä–µ–∫–ª–∞–º—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
    adsService.showBannerAd();
  }, []);

  const handleStartGame = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –º–µ–∂—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã
      const isAdReady = await adsService.isInterstitialAdReady();

      if (isAdReady) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã
        const adShown = await adsService.showInterstitialAd();
        if (adShown) {
          console.log("Interstitial ad shown before game start");
        }
      }

      dispatch(startGame());
      navigation.navigate("Game");
    } catch (error) {
      console.error("Failed to start game:", error);
      Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É");
    }
  };

  const handleShowRewardedAd = async () => {
    try {
      const result = await adsService.showRewardedAd();
      if (result.success && result.reward) {
        Alert.alert(
          "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!",
          `–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${result.reward.amount} –º–æ–Ω–µ—Ç!`,
          [{ text: "OK" }]
        );
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
      }
    } catch (error) {
      console.error("Failed to show rewarded ad:", error);
      Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É");
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.content}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <View style={styles.header}>
          <Text style={styles.title}>Touristoo Runner</Text>
          <Text style={styles.subtitle}>–ë–µ–≥–∏, —Å–æ–±–∏—Ä–∞–π –º–æ–Ω–µ—Ç—ã, –≤—ã–∂–∏–≤–∞–π!</Text>
        </View>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ */}
        <View style={styles.statsContainer}>
          <View style={styles.statItem}>
            <Text style={styles.statValue}>{score.toLocaleString()}</Text>
            <Text style={styles.statLabel}>–õ—É—á—à–∏–π —Å—á–µ—Ç</Text>
          </View>
          <View style={styles.statItem}>
            <Text style={styles.statValue}>{coins}</Text>
            <Text style={styles.statLabel}>–ú–æ–Ω–µ—Ç—ã</Text>
          </View>
          <View style={styles.statItem}>
            <Text style={styles.statValue}>{currentLevel}</Text>
            <Text style={styles.statLabel}>–£—Ä–æ–≤–µ–Ω—å</Text>
          </View>
        </View>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–æ–∫–µ */}
        {isAuthenticated && currentPlayer && (
          <View style={styles.playerInfo}>
            <Text style={styles.playerName}>–ü—Ä–∏–≤–µ—Ç, {currentPlayer.name}!</Text>
            {currentPlayer.isGuest && (
              <Text style={styles.guestWarning}>
                –í—ã –∏–≥—Ä–∞–µ—Ç–µ –∫–∞–∫ –≥–æ—Å—Ç—å. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
              </Text>
            )}
          </View>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <View style={styles.actionsContainer}>
          <TouchableOpacity
            style={styles.primaryButton}
            onPress={handleStartGame}
            activeOpacity={0.8}
          >
            <Text style={styles.primaryButtonText}>–ò–ì–†–ê–¢–¨</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.secondaryButton}
            onPress={handleShowRewardedAd}
            activeOpacity={0.8}
          >
            <Text style={styles.secondaryButtonText}>
              –°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É –∑–∞ –º–æ–Ω–µ—Ç—ã
            </Text>
          </TouchableOpacity>

          {!isAuthenticated && (
            <TouchableOpacity
              style={styles.linkButton}
              onPress={() => navigation.navigate("Profile")}
              activeOpacity={0.8}
            >
              <Text style={styles.linkButtonText}>–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç</Text>
            </TouchableOpacity>
          )}
        </View>

        {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <View style={styles.quickActions}>
          <TouchableOpacity
            style={styles.quickActionButton}
            onPress={() => navigation.navigate("Leaderboard")}
            activeOpacity={0.8}
          >
            <Text style={styles.quickActionText}>üèÜ –†–µ–π—Ç–∏–Ω–≥</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.quickActionButton}
            onPress={() => navigation.navigate("Shop")}
            activeOpacity={0.8}
          >
            <Text style={styles.quickActionText}>üõí –ú–∞–≥–∞–∑–∏–Ω</Text>
          </TouchableOpacity>
        </View>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f0f0f0",
  },
  content: {
    flex: 1,
    padding: 20,
    justifyContent: "center",
  },
  header: {
    alignItems: "center",
    marginBottom: 40,
  },
  title: {
    fontSize: 32,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: "#666",
    textAlign: "center",
  },
  statsContainer: {
    flexDirection: "row",
    justifyContent: "space-around",
    marginBottom: 30,
    backgroundColor: "#fff",
    borderRadius: 12,
    padding: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  statItem: {
    alignItems: "center",
  },
  statValue: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#007AFF",
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    color: "#666",
  },
  playerInfo: {
    backgroundColor: "#fff",
    borderRadius: 12,
    padding: 16,
    marginBottom: 30,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  playerName: {
    fontSize: 18,
    fontWeight: "600",
    color: "#333",
    marginBottom: 8,
  },
  guestWarning: {
    fontSize: 14,
    color: "#ff6b6b",
  },
  actionsContainer: {
    marginBottom: 30,
  },
  primaryButton: {
    backgroundColor: "#007AFF",
    borderRadius: 12,
    padding: 16,
    alignItems: "center",
    marginBottom: 12,
    shadowColor: "#007AFF",
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 5,
  },
  primaryButtonText: {
    color: "#fff",
    fontSize: 18,
    fontWeight: "bold",
  },
  secondaryButton: {
    backgroundColor: "#34C759",
    borderRadius: 12,
    padding: 16,
    alignItems: "center",
    marginBottom: 12,
  },
  secondaryButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "600",
  },
  linkButton: {
    alignItems: "center",
    padding: 12,
  },
  linkButtonText: {
    color: "#007AFF",
    fontSize: 16,
    fontWeight: "500",
  },
  quickActions: {
    flexDirection: "row",
    justifyContent: "space-around",
  },
  quickActionButton: {
    backgroundColor: "#fff",
    borderRadius: 12,
    padding: 16,
    flex: 1,
    marginHorizontal: 8,
    alignItems: "center",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  quickActionText: {
    fontSize: 16,
    fontWeight: "600",
    color: "#333",
  },
});

export default HomeScreen;
