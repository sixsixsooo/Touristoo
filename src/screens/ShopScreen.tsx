import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  SafeAreaView,
  Alert,
  Image,
} from "react-native";
import { useSelector, useDispatch } from "react-redux";
import { RootState } from "@/store";
import { Skin } from "@/types";
import { adsService } from "@/services/adsService";

const ShopScreen: React.FC = () => {
  const dispatch = useDispatch();
  const { currentPlayer, skins } = useSelector(
    (state: RootState) => state.player
  );
  const { coins } = useSelector((state: RootState) => state.game);
  const [selectedCategory, setSelectedCategory] = useState<
    "skins" | "boosters" | "coins"
  >("skins");

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
  const mockSkins: Skin[] = [
    {
      id: "1",
      name: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–µ–≥—É–Ω",
      description: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂",
      price: 0,
      isUnlocked: true,
      modelPath: "models/classic_runner.glb",
      texturePath: "textures/classic_runner.jpg",
      rarity: "common",
    },
    {
      id: "2",
      name: "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –±–µ–≥—É–Ω",
      description: "–ë–µ–≥—É–Ω –∏–∑ –±—É–¥—É—â–µ–≥–æ",
      price: 100,
      isUnlocked: false,
      modelPath: "models/space_runner.glb",
      texturePath: "textures/space_runner.jpg",
      rarity: "rare",
    },
    {
      id: "3",
      name: "–î—Ä–∞–∫–æ–Ω–∏–π –±–µ–≥—É–Ω",
      description: "–ú–æ—â–Ω—ã–π –¥—Ä–∞–∫–æ–Ω-–±–µ–≥—É–Ω",
      price: 500,
      isUnlocked: false,
      modelPath: "models/dragon_runner.glb",
      texturePath: "textures/dragon_runner.jpg",
      rarity: "epic",
    },
    {
      id: "4",
      name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –≥–µ—Ä–æ–π",
      description: "–°–∞–º—ã–π —Ä–µ–¥–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂",
      price: 1000,
      isUnlocked: false,
      modelPath: "models/legend_runner.glb",
      texturePath: "textures/legend_runner.jpg",
      rarity: "legendary",
    },
  ];

  const mockBoosters = [
    {
      id: "1",
      name: "–©–∏—Ç",
      description: "–ó–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è",
      price: 50,
      icon: "üõ°Ô∏è",
    },
    {
      id: "2",
      name: "–£—Å–∫–æ—Ä–µ–Ω–∏–µ",
      description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ 30 —Å–µ–∫—É–Ω–¥",
      price: 75,
      icon: "‚ö°",
    },
    {
      id: "3",
      name: "–ú–∞–≥–Ω–∏—Ç",
      description: "–ü—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –º–æ–Ω–µ—Ç—ã –Ω–∞ 20 —Å–µ–∫—É–Ω–¥",
      price: 100,
      icon: "üß≤",
    },
  ];

  const mockCoinPacks = [
    {
      id: "1",
      name: "–ú–∞–ª—ã–π –ø–∞–∫–µ—Ç",
      description: "100 –º–æ–Ω–µ—Ç",
      price: 99,
      currency: "rub",
      icon: "üí∞",
    },
    {
      id: "2",
      name: "–°—Ä–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç",
      description: "500 –º–æ–Ω–µ—Ç",
      price: 399,
      currency: "rub",
      icon: "üí∞üí∞",
    },
    {
      id: "3",
      name: "–ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç",
      description: "1000 –º–æ–Ω–µ—Ç",
      price: 699,
      currency: "rub",
      icon: "üí∞üí∞üí∞",
    },
  ];

  useEffect(() => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä–Ω—É—é —Ä–µ–∫–ª–∞–º—É –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    adsService.showBannerAd();
  }, []);

  const handlePurchaseSkin = async (skin: Skin) => {
    if (skin.isUnlocked) {
      // –í—ã–±–∏—Ä–∞–µ–º —Å–∫–∏–Ω
      dispatch({ type: "player/setCurrentSkin", payload: skin.id });
      Alert.alert("–£—Å–ø–µ—Ö", `–°–∫–∏–Ω "${skin.name}" –≤—ã–±—Ä–∞–Ω!`);
      return;
    }

    if (coins < skin.price) {
      Alert.alert(
        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç",
        `–í–∞–º –Ω—É–∂–Ω–æ ${skin.price - coins} –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Å–∫–∏–Ω–∞.`,
        [
          { text: "–û—Ç–º–µ–Ω–∞", style: "cancel" },
          {
            text: "–ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã",
            onPress: () => setSelectedCategory("coins"),
          },
        ]
      );
      return;
    }

    // –ü–æ–∫—É–ø–∫–∞ —Å–∫–∏–Ω–∞ –∑–∞ –º–æ–Ω–µ—Ç—ã
    Alert.alert(
      "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏",
      `–ö—É–ø–∏—Ç—å —Å–∫–∏–Ω "${skin.name}" –∑–∞ ${skin.price} –º–æ–Ω–µ—Ç?`,
      [
        { text: "–û—Ç–º–µ–Ω–∞", style: "cancel" },
        {
          text: "–ö—É–ø–∏—Ç—å",
          onPress: () => {
            dispatch({ type: "player/unlockSkin", payload: skin.id });
            dispatch({ type: "game/spendCoins", payload: skin.price });
            Alert.alert("–£—Å–ø–µ—Ö", `–°–∫–∏–Ω "${skin.name}" –∫—É–ø–ª–µ–Ω!`);
          },
        },
      ]
    );
  };

  const handlePurchaseBooster = (booster: any) => {
    if (coins < booster.price) {
      Alert.alert(
        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç",
        `–í–∞–º –Ω—É–∂–Ω–æ ${booster.price - coins} –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –±—É—Å—Ç–µ—Ä–∞.`
      );
      return;
    }

    Alert.alert(
      "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏",
      `–ö—É–ø–∏—Ç—å "${booster.name}" –∑–∞ ${booster.price} –º–æ–Ω–µ—Ç?`,
      [
        { text: "–û—Ç–º–µ–Ω–∞", style: "cancel" },
        {
          text: "–ö—É–ø–∏—Ç—å",
          onPress: () => {
            dispatch({ type: "game/spendCoins", payload: booster.price });
            Alert.alert("–£—Å–ø–µ—Ö", `–ë—É—Å—Ç–µ—Ä "${booster.name}" –∫—É–ø–ª–µ–Ω!`);
          },
        },
      ]
    );
  };

  const handlePurchaseCoins = async (coinPack: any) => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    Alert.alert(
      "–ü–æ–∫—É–ø–∫–∞ –º–æ–Ω–µ—Ç",
      `–ö—É–ø–∏—Ç—å ${coinPack.description} –∑–∞ ${coinPack.price}‚ÇΩ?`,
      [
        { text: "–û—Ç–º–µ–Ω–∞", style: "cancel" },
        {
          text: "–ö—É–ø–∏—Ç—å",
          onPress: async () => {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É –∑–∞ –º–æ–Ω–µ—Ç—ã –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
            const result = await adsService.showRewardedAd();
            if (result.success) {
              const coinsToAdd = parseInt(coinPack.description.split(" ")[0]);
              dispatch({ type: "game/addCoins", payload: coinsToAdd });
              Alert.alert("–£—Å–ø–µ—Ö", `–ü–æ–ª—É—á–µ–Ω–æ ${coinsToAdd} –º–æ–Ω–µ—Ç!`);
            }
          },
        },
      ]
    );
  };

  const renderSkin = ({ item }: { item: Skin }) => (
    <TouchableOpacity
      style={[
        styles.item,
        item.isUnlocked && styles.unlockedItem,
        item.rarity === "legendary" && styles.legendaryItem,
      ]}
      onPress={() => handlePurchaseSkin(item)}
    >
      <View style={styles.itemHeader}>
        <Text style={styles.itemName}>{item.name}</Text>
        <Text style={styles.itemPrice}>
          {item.isUnlocked ? "‚úì" : `${item.price} –º–æ–Ω–µ—Ç`}
        </Text>
      </View>
      <Text style={styles.itemDescription}>{item.description}</Text>
      <View style={styles.rarityBadge}>
        <Text style={styles.rarityText}>
          {item.rarity === "common" && "–û–±—ã—á–Ω—ã–π"}
          {item.rarity === "rare" && "–†–µ–¥–∫–∏–π"}
          {item.rarity === "epic" && "–≠–ø–∏—á–µ—Å–∫–∏–π"}
          {item.rarity === "legendary" && "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π"}
        </Text>
      </View>
    </TouchableOpacity>
  );

  const renderBooster = ({ item }: { item: any }) => (
    <TouchableOpacity
      style={styles.item}
      onPress={() => handlePurchaseBooster(item)}
    >
      <View style={styles.itemHeader}>
        <Text style={styles.itemName}>
          {item.icon} {item.name}
        </Text>
        <Text style={styles.itemPrice}>{item.price} –º–æ–Ω–µ—Ç</Text>
      </View>
      <Text style={styles.itemDescription}>{item.description}</Text>
    </TouchableOpacity>
  );

  const renderCoinPack = ({ item }: { item: any }) => (
    <TouchableOpacity
      style={styles.item}
      onPress={() => handlePurchaseCoins(item)}
    >
      <View style={styles.itemHeader}>
        <Text style={styles.itemName}>
          {item.icon} {item.name}
        </Text>
        <Text style={styles.itemPrice}>{item.price}‚ÇΩ</Text>
      </View>
      <Text style={styles.itemDescription}>{item.description}</Text>
    </TouchableOpacity>
  );

  const renderContent = () => {
    switch (selectedCategory) {
      case "skins":
        return (
          <FlatList
            data={mockSkins}
            renderItem={renderSkin}
            keyExtractor={(item) => item.id}
            showsVerticalScrollIndicator={false}
          />
        );
      case "boosters":
        return (
          <FlatList
            data={mockBoosters}
            renderItem={renderBooster}
            keyExtractor={(item) => item.id}
            showsVerticalScrollIndicator={false}
          />
        );
      case "coins":
        return (
          <FlatList
            data={mockCoinPacks}
            renderItem={renderCoinPack}
            keyExtractor={(item) => item.id}
            showsVerticalScrollIndicator={false}
          />
        );
      default:
        return null;
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>–ú–∞–≥–∞–∑–∏–Ω</Text>
        <View style={styles.coinsContainer}>
          <Text style={styles.coinsText}>üí∞ {coins}</Text>
        </View>
      </View>

      <View style={styles.categoryTabs}>
        <TouchableOpacity
          style={[styles.tab, selectedCategory === "skins" && styles.activeTab]}
          onPress={() => setSelectedCategory("skins")}
        >
          <Text
            style={[
              styles.tabText,
              selectedCategory === "skins" && styles.activeTabText,
            ]}
          >
            –°–∫–∏–Ω—ã
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[
            styles.tab,
            selectedCategory === "boosters" && styles.activeTab,
          ]}
          onPress={() => setSelectedCategory("boosters")}
        >
          <Text
            style={[
              styles.tabText,
              selectedCategory === "boosters" && styles.activeTabText,
            ]}
          >
            –ë—É—Å—Ç–µ—Ä—ã
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tab, selectedCategory === "coins" && styles.activeTab]}
          onPress={() => setSelectedCategory("coins")}
        >
          <Text
            style={[
              styles.tabText,
              selectedCategory === "coins" && styles.activeTabText,
            ]}
          >
            –ú–æ–Ω–µ—Ç—ã
          </Text>
        </TouchableOpacity>
      </View>

      <View style={styles.content}>{renderContent()}</View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f0f0f0",
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    padding: 20,
    backgroundColor: "#fff",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#333",
  },
  coinsContainer: {
    backgroundColor: "#FFD700",
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 20,
  },
  coinsText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
  },
  categoryTabs: {
    flexDirection: "row",
    backgroundColor: "#fff",
    marginHorizontal: 20,
    marginTop: 10,
    borderRadius: 12,
    padding: 4,
  },
  tab: {
    flex: 1,
    paddingVertical: 12,
    alignItems: "center",
    borderRadius: 8,
  },
  activeTab: {
    backgroundColor: "#007AFF",
  },
  tabText: {
    fontSize: 16,
    fontWeight: "600",
    color: "#666",
  },
  activeTabText: {
    color: "#fff",
  },
  content: {
    flex: 1,
    padding: 20,
  },
  item: {
    backgroundColor: "#fff",
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  unlockedItem: {
    borderColor: "#34C759",
    borderWidth: 2,
  },
  legendaryItem: {
    borderColor: "#FFD700",
    borderWidth: 2,
  },
  itemHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 8,
  },
  itemName: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#333",
    flex: 1,
  },
  itemPrice: {
    fontSize: 16,
    fontWeight: "600",
    color: "#007AFF",
  },
  itemDescription: {
    fontSize: 14,
    color: "#666",
    marginBottom: 8,
  },
  rarityBadge: {
    alignSelf: "flex-start",
    backgroundColor: "#E0E0E0",
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  rarityText: {
    fontSize: 12,
    fontWeight: "600",
    color: "#333",
  },
});

export default ShopScreen;
